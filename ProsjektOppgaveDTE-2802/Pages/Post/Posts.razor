@page "/posts/{BlogId:int}"
@using ProsjektOppgaveBlazor.data.Models;
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<h3>Posts</h3>

<a class="btn btn-primary" href="post/@BlogId">Create</a>

@if (posts == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" >
    <thead>
    <tr>
        <th>Title</th>
        <th>Content</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var post in posts)
    {
        <tr>
            <td>@post.Title</td>
            <td>@post.Content</td>
            <td><a href="comments/@post.PostId">View</a></td>
            <td><a href="post/edit/@post.PostId">Edit</a></td>
            <td><a href="/posts/@BlogId" @onclick="@(e =>DeletePost(post.PostId))">Delete</a></td>
        </tr>
    }
    </tbody>
    </table>
}

@code {
    [Parameter]
    public int BlogId { get; set; }
    private Post[] posts;

    protected override async Task OnInitializedAsync()
    {
        posts = await BlogHttpClient.GetFromJsonAsync<Post[]>($"https://localhost:7022/Post?blogId={BlogId}");
    }

    private async Task DeletePost(int id)
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        BlogHttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await BlogHttpClient.DeleteAsync($"https://localhost:7022/Post/{id}");
        NavigationManager.NavigateTo($"/posts/{BlogId}", true);
    }
}
